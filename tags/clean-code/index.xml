<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>clean-code on Leonardo Zamariola</title>
    <link>https://zamariola.com.br/tags/clean-code/</link>
    <description>Recent content in clean-code on Leonardo Zamariola</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 May 2019 18:16:13 -0300</lastBuildDate><atom:link href="https://zamariola.com.br/tags/clean-code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why and how you should code to interfaces - and high-order functions</title>
      <link>https://zamariola.com.br/post/why-and-how-you-should-code-to-interfaces/</link>
      <pubDate>Thu, 16 May 2019 18:16:13 -0300</pubDate>
      
      <guid>https://zamariola.com.br/post/why-and-how-you-should-code-to-interfaces/</guid>
      <description>One famous debate that emerges in every design discussion is about interfaces. As always, each programmer has a different conception about it and it’s something almost inevitable to spend hours arguing about. Even when the discussion isn’t about whether or not we should use it, it’s about how to use it. As a programmer, I have my own opinion as well. I expect to give you an overview about the importance of interfaces when you should or not use it, and what you can apply it to.</description>
    </item>
    
    <item>
      <title>How to Start Writing Go Code</title>
      <link>https://zamariola.com.br/post/how-to-start-writing-go-code/</link>
      <pubDate>Sun, 28 Apr 2019 09:53:03 -0300</pubDate>
      
      <guid>https://zamariola.com.br/post/how-to-start-writing-go-code/</guid>
      <description>Why you should read this Ok, I know we have thousands of different (and better) articles explaining how to start coding in Golang (tour of Go, Effective Go and etc). Considering it, I’m going to focus on real examples (and some code) to make your Go journey a little bit easier, i.e., how to organize your go code, how to connect to a database, how to log things and what framework options (if any) to consider.</description>
    </item>
    
    <item>
      <title>Hybris Good Practices I</title>
      <link>https://zamariola.com.br/post/hybris-good-practices-i/</link>
      <pubDate>Tue, 26 Jun 2018 21:01:44 -0300</pubDate>
      
      <guid>https://zamariola.com.br/post/hybris-good-practices-i/</guid>
      <description>1) Name your classes/interfaces with specific names instead of “Default” or “YourCustumer” prefix. First of all, we have to keep this important thing in mind: we are coding general and abstract business and technical rules. &amp;ldquo;Coincidentally&amp;rdquo;, these rules are being used by our customer. (To make things clear, the customer here means the company that are paying you (or your employer) to customize the hybris).
Suppose that you are defining a new way of adding a product to cart, that is, you will add the product (default behavior) and change all quantities to one (new behaviour).</description>
    </item>
    
  </channel>
</rss>
