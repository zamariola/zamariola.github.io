<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clean-Code on Leonardo Zamariola</title>
    <link>https://zamariola.com.br/tags/clean-code/</link>
    <description>Recent content in Clean-Code on Leonardo Zamariola</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Aug 2025 18:09:27 -0300</lastBuildDate>
    <atom:link href="https://zamariola.com.br/tags/clean-code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What is the SOLID pattern and why you should avoid it</title>
      <link>https://zamariola.com.br/post/what-is-solid-why-you-should-avoid-it/</link>
      <pubDate>Sat, 23 Aug 2025 18:09:27 -0300</pubDate>
      <guid>https://zamariola.com.br/post/what-is-solid-why-you-should-avoid-it/</guid>
      <description>&lt;h1 id=&#34;what-is-solid&#34;&gt;What is SOLID&lt;/h1&gt;&#xA;&lt;p&gt;The SOLID is an acronym created in 2004 based on principles that Uncle Bob introduced in the 2000s to identify the best practices of software design.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight-box&#34;&gt;&#xA;  üí° &lt;strong&gt;Disclaimer:&lt;/strong&gt; I&amp;rsquo;m not giving a full description of the SOLID pattern because a &lt;a href=&#34;https://en.wikipedia.org/wiki/SOLID&#34;&gt;lot of folks have done that&lt;/a&gt;.&#xA;Digital Ocean &lt;a href=&#34;https://www.digitalocean.com/community/conceptual-articles/s-o-l-i-d-the-first-five-principles-of-object-oriented-design&#34;&gt;has done that&lt;/a&gt; and the Uncle Bob himself &lt;a href=&#34;https://blog.cleancoder.com/uncle-bob/2020/10/18/Solid-Relevance.html&#34;&gt;has done that&lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://zamariola.com.br/post/what-is-solid-why-you-should-avoid-it/solid.png&#34; alt=&#34;SOLID&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Although the SOLID principles may apply to any object-oriented design, they usually bring with them the Clean Code and Clean Architecture philosophies.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why and how you should code to interfaces - and high-order functions</title>
      <link>https://zamariola.com.br/post/why-and-how-you-should-code-to-interfaces/</link>
      <pubDate>Thu, 16 May 2019 18:16:13 -0300</pubDate>
      <guid>https://zamariola.com.br/post/why-and-how-you-should-code-to-interfaces/</guid>
      <description>&lt;p&gt;One famous debate that emerges in every design discussion is about interfaces. As always, each programmer has a different conception about it and it‚Äôs something almost inevitable to spend hours arguing about. Even when the discussion isn‚Äôt about whether or not we should use it, it‚Äôs about how to use it. As a programmer, I have my own opinion as well. I expect to give you an overview about the importance of interfaces when you should or not use it, and what you can apply it to.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Start Writing Go Code</title>
      <link>https://zamariola.com.br/post/how-to-start-writing-go-code/</link>
      <pubDate>Sun, 28 Apr 2019 09:53:03 -0300</pubDate>
      <guid>https://zamariola.com.br/post/how-to-start-writing-go-code/</guid>
      <description>&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;why-you-should-read-this&#34;&gt;Why you should read this&lt;/h1&gt;&#xA;&lt;p&gt;Ok, I know we have thousands of different (and better) articles explaining how to start coding in Golang (tour of Go, Effective Go and etc). Considering it, I‚Äôm going to focus on real examples (and some code)  to make your Go journey a little bit easier, i.e., how to organize your go code, how to connect to a database, how to log things and what framework options (if any) to consider.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hybris Good Practices I</title>
      <link>https://zamariola.com.br/post/hybris-good-practices-i/</link>
      <pubDate>Tue, 26 Jun 2018 21:01:44 -0300</pubDate>
      <guid>https://zamariola.com.br/post/hybris-good-practices-i/</guid>
      <description>&lt;h3 id=&#34;1-name-your-classesinterfaces-with-specific-names-instead-of-default-or-yourcustumer-prefix&#34;&gt;1) Name your classes/interfaces with specific names instead of ‚ÄúDefault‚Äù or ‚ÄúYourCustumer‚Äù prefix.&lt;/h3&gt;&#xA;&lt;p&gt;First of all, we have to keep this important thing in mind: we are coding general and abstract business and technical rules. &amp;ldquo;Coincidentally&amp;rdquo;, these rules are being used by our customer. (To make things clear, the customer here means the company that are paying you (or your employer) to customize the hybris).&lt;/p&gt;&#xA;&lt;p&gt;Suppose that you are defining a new way of adding a product to cart, that is, you will add the product (default behavior) and change all quantities to one (new behaviour). This new behavior is exclusive to your customer now, but it may not be in the future.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
