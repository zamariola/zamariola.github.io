<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leonardo Zamariola</title>
    <link>https://zamariola.com.br/</link>
    <description>Recent content on Leonardo Zamariola</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Mar 2021 10:13:13 -0300</lastBuildDate>
    
	<atom:link href="https://zamariola.com.br/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TDC Innovation - Golang in Digital Surgery and Integration with Medical Devices</title>
      <link>https://zamariola.com.br/post/tdc-digital-surgery-medical-devices/</link>
      <pubDate>Thu, 25 Mar 2021 10:13:13 -0300</pubDate>
      
      <guid>https://zamariola.com.br/post/tdc-digital-surgery-medical-devices/</guid>
      <description>What it&amp;rsquo;s about Slides from the TDC Innovation 2021 edition.
On this talk I touched some topics related Digital Surgery and Medical Devices Integration. It explains how we created a FHIR, DICOM and HL7 ADT Integration using plain Go protocols and resources.
 The source code can be found here</description>
    </item>
    
    <item>
      <title>TDC Recife - From OOP to High Order Functions</title>
      <link>https://zamariola.com.br/post/tdc-from-oop-to-high-order-functions/</link>
      <pubDate>Fri, 30 Oct 2020 13:09:13 -0300</pubDate>
      
      <guid>https://zamariola.com.br/post/tdc-from-oop-to-high-order-functions/</guid>
      <description>What it&amp;rsquo;s about Slides from the TDC Recife 2020 edition.
On this talk I touched some topics related to a past experience moving from OOP to High Order Functions in Go. Our team was used to Java using plain Object oriented and they had to move to Golang. Righ after the transition phase they were coding using a more procedural/OOP approach, but after a couple of weeks the code evolved to a more idiomatic Golang.</description>
    </item>
    
    <item>
      <title>Why you should be using Ansible</title>
      <link>https://zamariola.com.br/post/why-you-should-be-using-ansible/</link>
      <pubDate>Sun, 24 May 2020 18:16:13 -0300</pubDate>
      
      <guid>https://zamariola.com.br/post/why-you-should-be-using-ansible/</guid>
      <description>What Ansible is and what it isn&amp;rsquo;t Ansible can be categorized as a Devops Automation Tool and a Configuration Management Tool. Redhat defines it as:
Ansible delivers simple IT automation that ends repetitive tasks and frees up DevOps teams for more strategic work. &amp;mdash; Ansible website
I&amp;rsquo;m assuming that you&amp;rsquo;re familiar to the concepts of devops, infrastructure as code and configuration management, so I’m not going to detail them here.</description>
    </item>
    
    <item>
      <title>Application, Evolution and Monitoring</title>
      <link>https://zamariola.com.br/post/application-evolution-and-monitoring/</link>
      <pubDate>Wed, 28 Aug 2019 23:01:00 -0300</pubDate>
      
      <guid>https://zamariola.com.br/post/application-evolution-and-monitoring/</guid>
      <description>The essence of software development I have already written here, that when we start coding the most important thing that we should keep in mind is maintainability. Even with other methods than scrum, like waterfall or “perfect planning”, it’s really hard to know beforehand exactly how to develop your system/application. So, if you want to deliver a good software and a great experience to your customers, you should invest time and energy building a high flexible system.</description>
    </item>
    
    <item>
      <title>Why and how you should code to interfaces - and high-order functions</title>
      <link>https://zamariola.com.br/post/why-and-how-you-should-code-to-interfaces/</link>
      <pubDate>Thu, 16 May 2019 18:16:13 -0300</pubDate>
      
      <guid>https://zamariola.com.br/post/why-and-how-you-should-code-to-interfaces/</guid>
      <description>One famous debate that emerges in every design discussion is about interfaces. As always, each programmer has a different conception about it and it’s something almost inevitable to spend hours arguing about. Even when the discussion isn’t about whether or not we should use it, it’s about how to use it. As a programmer, I have my own opinion as well. I expect to give you an overview about the importance of interfaces when you should or not use it, and what you can apply it to.</description>
    </item>
    
    <item>
      <title>Takt Time - How to pick the right technology stack</title>
      <link>https://zamariola.com.br/post/takt-time-how-to-pick-a-technology-stack/</link>
      <pubDate>Wed, 08 May 2019 20:32:13 -0300</pubDate>
      
      <guid>https://zamariola.com.br/post/takt-time-how-to-pick-a-technology-stack/</guid>
      <description>What’s takt time and why should you care about it? Every time we start a new project, a startup or even a little app, we are faced with a big decision: which technology we should use. Usually, we programmers choose our infrastructure, frameworks and programming languages (tech stack) based on what we think will make ourselves happier. However, that selection approach based on feeling may not result in the most assertive decision.</description>
    </item>
    
    <item>
      <title>How to Start Writing Go Code</title>
      <link>https://zamariola.com.br/post/how-to-start-writing-go-code/</link>
      <pubDate>Sun, 28 Apr 2019 09:53:03 -0300</pubDate>
      
      <guid>https://zamariola.com.br/post/how-to-start-writing-go-code/</guid>
      <description>Why you should read this Ok, I know we have thousands of different (and better) articles explaining how to start coding in Golang (tour of Go, Effective Go and etc). Considering it, I’m going to focus on real examples (and some code) to make your Go journey a little bit easier, i.e., how to organize your go code, how to connect to a database, how to log things and what framework options (if any) to consider.</description>
    </item>
    
    <item>
      <title>High Order Functions e Functional Interfaces</title>
      <link>https://zamariola.com.br/slides/devcamp2019/</link>
      <pubDate>Mon, 09 Jul 2018 15:00:00 -0300</pubDate>
      
      <guid>https://zamariola.com.br/slides/devcamp2019/</guid>
      <description>Nova abordagem para os tradicionais desafios de um código limpo, desacoplado e coeso</description>
    </item>
    
    <item>
      <title>Hybris Good Practices I</title>
      <link>https://zamariola.com.br/post/hybris-good-practices-i/</link>
      <pubDate>Tue, 26 Jun 2018 21:01:44 -0300</pubDate>
      
      <guid>https://zamariola.com.br/post/hybris-good-practices-i/</guid>
      <description>1) Name your classes/interfaces with specific names instead of “Default” or “YourCustumer” prefix. First of all, we have to keep this important thing in mind: we are coding general and abstract business and technical rules. &amp;ldquo;Coincidentally&amp;rdquo;, these rules are being used by our customer. (To make things clear, the customer here means the company that are paying you (or your employer) to customize the hybris).
Suppose that you are defining a new way of adding a product to cart, that is, you will add the product (default behavior) and change all quantities to one (new behaviour).</description>
    </item>
    
    <item>
      <title>Demo Slideshow </title>
      <link>https://zamariola.com.br/slides/demo-slideshow/</link>
      <pubDate>Sat, 02 Jun 2018 16:43:02 -0400</pubDate>
      
      <guid>https://zamariola.com.br/slides/demo-slideshow/</guid>
      <description>Example content</description>
    </item>
    
  </channel>
</rss>